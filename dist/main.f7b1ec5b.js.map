{"version":3,"sources":["main.js"],"names":["$siteList","$","$lastLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","console","log","stopPropagation","splice","prompt","indexOf","push","toUpperCase","onbeforeunload","string","stringify","setItem","document","key","i","length","toLowerCase"],"mappings":"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","file":"main.f7b1ec5b.js","sourceRoot":"..\\src","sourcesContent":["const $siteList = $('.siteList')\r\nconst $lastLi = $siteList.find('li.last')\r\n//console.log($siteList)如果控制台出现了0：ul.siteList说明找对了，这里的0是伪数组\r\nconst x = localStorage.getItem('x') //从本地的储存里面读取储存数值后\r\nconst xObject = JSON.parse(x) //把字符串变成对象,对应 \r\n\r\nconst hashMap = xObject|| [\r\n    {logo:'A', url:'https://www.acfun.cn'},\r\n    {logo:'B', url:'https://www.bilibili.com'},\r\n];  \r\n//因为用了Prompt，所以不能定义hashMap，不用担心会被污染;logoType:'text'\r\n\r\nconst simplifyUrl = (url)=>{\r\n    return url.replace('https://', '')\r\n              .replace('http://','')\r\n              .replace('www','')\r\n              .replace(/\\/.*/,'')\r\n} //simplifyUrl = removeX;/.*是/连接后面那些东西变空,删除 /开头的内容\r\n\r\nconst render = ()=>{\r\n  $siteList.find('li:not(.last)').remove() //除了最后一项，全部清空，不然新增网址，会附带前面的网址，重复\r\n  //渲染之前把之前删掉，再渲染新的\r\n  hashMap.forEach((node, index) => {  //forEach会给你两个参数，一个是当前参数，一个是下标\r\n      //console.log(index);\r\n    const $li = $(`<li>\r\n        <div class=\"site\">    \r\n            <div class=\"logo\">${node.logo[0]}</div>\r\n            <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n            <div class='close'> \r\n              <svg class=\"icon\">\r\n                <use xlink:href=\"#icon-close\"></use>\r\n              </svg>\r\n            </div>\r\n        </div> \r\n    </li>`).insertBefore($lastLi);\r\n    $li.on('click', ()=>{\r\n        window.open(node.url)\r\n    })\r\n    $li.on('click', '.close', (e)=>{\r\n        console.log('这里执行了') //调查哪里出问题，这里执行正常\r\n        e.stopPropagation()//监听close的工具组，阻止冒泡:event.stopPropagation()\r\n        console.log(hashMap)\r\n        hashMap.splice(index, 1) //数组里面删除是用splice\r\n        render()\r\n       })\r\n    }) \r\n}\r\n\r\nrender()\r\n\r\n$('.addButton').on('click',()=>{\r\n      let url = window.prompt('请问你要添加的网址是啥？')\r\n      //const赋值是唯一的，所有改成用let\r\n      //console.log(1)调试大法，看是否有正常运行\r\n      //console.log(url) //测试url是否等于用户输入的网址\r\n      if(url.indexOf('http')!==0){\r\n          url = 'https://' + url //alert('请输入http开头的网址')\r\n      }\r\n      console.log(url)\r\n      hashMap.push({\r\n          logo:simplifyUrl(url)[0].toUpperCase(),\r\n          //logoType:'text',\r\n          url:url\r\n      }); //toUpperCase()是把首字母改成大写字母\r\n     render()\r\n      //const $li = $(`<li>\r\n        //<a href=\"${url}\">   \r\n            //<div class=\"site\">    \r\n            //<div class=\"logo\">${url[8]}</div> \r\n            //<div class=\"link\">${url}</div>\r\n           // </div>\r\n        //</a> \r\n     // </li>`).insertBefore($lastLi)\r\n      //这里的``是反引号，再tap上面那个键,新增空白卡片;${url}插值法；${url[0]网址的第一个字符}\r\n  })\r\n\r\n  window.onbeforeunload = () =>{\r\n      //console.log('页面要关闭了')控制台设置选择preserve log，就可以看的这句话了\r\n      const string = JSON.stringify(hashMap)//JSON.stringify可以把对象变成字符串\r\n      //console.log(typeof hashMap)\r\n      //console.log(hashMap)\r\n      //console.log(typeof string) //查看类型\r\n      //console.log(string)//变成字符串就可以储存\r\n      localStorage.setItem('x', string) //这里省略了window，是全局变量，括号里面（key,value）\r\n      //在本地的储存里面设置一个x，它的值就是这个string\r\n  }\r\n\r\n  //document.addEventListener等同于下面那句话\r\n  $(document).on('keypress', (e) =>{\r\n      //const key = e.key 当key与e.key是一样的，就可以简写成以下代码：\r\n      const {key} = e\r\n      for(let i=0;i<hashMap.length;i++){\r\n          if(hashMap[i].logo.toLowerCase() === key){ \r\n              //当hashmap的第i个的logo的小写后 等于 key这个值，\r\n              window.open(hashMap[i].url)\r\n              //说明用户找的就是这个，然后打开这个网址\r\n          }\r\n      }\r\n  })"]}